#
# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#FROM nvidia/cuda:10.1-devel-ubuntu18.04 
FROM nvidia/cuda:11.0-base-ubuntu18.04
# Install java dependencies 
RUN apt-get update && apt-get install -y --no-install-recommends openjdk-8-jdk openjdk-8-jre
ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-amd64
ENV PATH $PATH:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/bin:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin

# Before building the docker image, first either download Apache Spark 3.0+ from 
# http://spark.apache.org/downloads.html or build and make a Spark distribution following
# the instructions in http://spark.apache.org/docs/3.0.1/building-spark.html (3.0.0 can 
# be used as well).  
# If this docker file is being used in the context of building your images from a Spark
# distribution, the docker build command should be invoked from the top level directory
# of the Spark distribution. E.g.:
# docker build -t spark:3.0.1 -f kubernetes/dockerfiles/spark/Dockerfile .

# TODO: Investigate running both pip and pip3 via virtualenvs
RUN apt-get update && \
    apt install -y python python-pip && \
    apt install -y python3 python3-pip && \
    # We remove ensurepip since it adds no functionality since pip is
    # installed on the image and it just takes up 1.6MB on the image
    rm -r /usr/lib/python*/ensurepip && \
    pip install --upgrade pip setuptools && \
    # You may install with python3 packages by using pip3.6
    # Removed the .cache to save space
    rm -r /root/.cache && rm -rf /var/cache/apt/* && \
    mkdir -p /log

ENV SPARK_MASTER_LOG /log
ENV SPARK_LOG_DIR /log

#ENTRYPOINT [ "bash -c ${SPARKHOME}/sbin/start-master.sh" & ]
#CMD ${SPARKHOME}/sbin/start-master.sh >> ${SPARKHOME}/log/spark-master.out
#ENTRYPOINT [ "${SPARK_HOME}/bin/spark-class org.apache.spark.deploy.master.Master" ]

